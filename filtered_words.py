# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZPdXKIlInKMlewXEobjFniDCbdcIfVzj
"""

from nltk.tag.util import str2tuple
import string
from nltk.corpus import stopwords
nltk.download('averaged_perceptron_tagger')
nltk.download('punkt')
nltk.download('stopwords')


text = nltk.word_tokenize("I'm upset because for the price of the dress, i thought it was embroidered! no, that is a print on the fabric. i think i cried a little when i opened the box. it is still ver pretty. i would say it is true to size, it is a tad bit big on me, but i am very tiny, but i can still get away with it. the color is vibrant. the style is unique. skirt portion is pretty poofy. i keep going back and forth on it mainly because of the price, although the quality is definitely there. except i wish it were emb")
with open('/content/positive.txt') as f:
    positive = f.readlines()

with open('/content/negative.txt') as f:
    negative = f.readlines()

stop = stopwords.words('english')
punctuation = string.punctuation
NOUNS = ['NN', 'NNS', 'NNP', 'NNPS']
VERBS = ['VB', 'VBG', 'VBD', 'VBN', 'VBP', 'VBZ']
ADJ = ['JJ', 'JJR', 'JJS']
 
positive_filtered = []
negative_filtered = []


for sub in positive:
    positive_filtered.append(sub.replace("\n", ""))

for sub in negative:
    negative_filtered.append(sub.replace("\n", ""))

print(positive_filtered)

for i in positive_filtered:
  token = nltk.pos_tag(i)
  if token[1] not in ADJ :
    positive_filtered.remove(i)

for i in negative_filtered:
  token = nltk.pos_tag(i)
  if token[1] not in ADJ :
    negative_filtered.remove(i)

for i in text : 
  if i in stop or i in punctuation :
    text.remove(i)


tags = nltk.pos_tag(text)

for i in tags :
  if i[1] == '.' :
    tags.remove(i)
    text.remove(i[0])

print (text)
print (tags)

adjectives = []
nouns = []
verbs = []
neighbouring = []
#tagged_token = nltk.tag.str2tuple('fly/NN')
#print (tagged_token)

for i in range(len(tags)) :   
    if (tags[i][1] in ADJ or tags[i][0] == 'not'):
    #if (tags[i][1] in ADJ or tags[i][0] == 'not') and (tags[i][0] in positive_filtered or tags[i][0] in negative_filtered)
      adjectives.append(tags[i][0])
      entry = []
      if(i-2 >=0 and i+2 < len(tags)) :
        entry.append(tags[i-2][0])
        entry.append(tags[i-1][0])
        entry.append(tags[i][0])
        entry.append(tags[i+1][0])
        entry.append(tags[i+2][0])
      neighbouring.append(entry)
    if tags[i][1] in NOUNS :
      nouns.append(tags[i][0])
    if tags[i][1] in VERBS :
      verbs.append(tags[i][0]) 
print(positive_filtered)
print(negative_filtered) 
print(adjectives)
print(nouns)
print(verbs)
print(neighbouring)



#def questionGenerator (arr[]) :